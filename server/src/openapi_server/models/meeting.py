# coding: utf-8

"""
    Student-Teacher Meeting Scheduler API

    An API for scheduling meetings, managing persons, students, teachers, their ratings, and integrating with Google services. Additional endpoints allow managing teachers, students, and scheduling multi-participant meetings. 

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from openapi_server.models.person import Person
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Meeting(BaseModel):
    """
    Meeting
    """ # noqa: E501
    location: Optional[StrictStr] = None
    start_time: Optional[datetime] = None
    finish_time: Optional[datetime] = None
    subject: Optional[StrictStr] = None
    people: Optional[List[Person]] = None
    attached_files: Optional[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]]] = None
    __properties: ClassVar[List[str]] = ["location", "start_time", "finish_time", "subject", "people", "attached_files"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Meeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item in self.people:
                if _item:
                    _items.append(_item.to_dict())
            _dict['people'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Meeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": obj.get("location"),
            "start_time": obj.get("start_time"),
            "finish_time": obj.get("finish_time"),
            "subject": obj.get("subject"),
            "people": [Person.from_dict(_item) for _item in obj.get("people")] if obj.get("people") is not None else None,
            "attached_files": obj.get("attached_files")
        })
        return _obj


