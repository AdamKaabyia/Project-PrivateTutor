from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401
from .File import File
from .base_model import Model

from .person import Person
from server.openapi_server import util


class Meeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location=None, start_time=None, finish_time=None, subject=None, people=None, attached_files=None):  # noqa: E501
        """Meeting - a model defined in OpenAPI

        :param location: The location of this Meeting.  # noqa: E501
        :type location: str
        :param start_time: The start_time of this Meeting.  # noqa: E501
        :type start_time: datetime
        :param finish_time: The finish_time of this Meeting.  # noqa: E501
        :type finish_time: datetime
        :param subject: The subject of this Meeting.  # noqa: E501
        :type subject: str
        :param people: The people of this Meeting.  # noqa: E501
        :type people: List[Person]
        :param attached_files: The attached_files of this Meeting.  # noqa: E501
        :type attached_files: List[file]
        """
        self.openapi_types = {
            'location': str,
            'start_time': datetime,
            'finish_time': datetime,
            'subject': str,
            'people': List[Person],
            'attached_files': List[File]
        }

        self.attribute_map = {
            'location': 'location',
            'start_time': 'start_time',
            'finish_time': 'finish_time',
            'subject': 'subject',
            'people': 'people',
            'attached_files': 'attached_files'
        }

        self._location = location
        self._start_time = start_time
        self._finish_time = finish_time
        self._subject = subject
        self._people = people
        self._attached_files = attached_files

    @classmethod
    def from_dict(cls, dikt) -> 'Meeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meeting of this Meeting.  # noqa: E501
        :rtype: Meeting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self) -> str:
        """Gets the location of this Meeting.


        :return: The location of this Meeting.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Meeting.


        :param location: The location of this Meeting.
        :type location: str
        """

        self._location = location

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this Meeting.


        :return: The start_time of this Meeting.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this Meeting.


        :param start_time: The start_time of this Meeting.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def finish_time(self) -> datetime:
        """Gets the finish_time of this Meeting.


        :return: The finish_time of this Meeting.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time: datetime):
        """Sets the finish_time of this Meeting.


        :param finish_time: The finish_time of this Meeting.
        :type finish_time: datetime
        """

        self._finish_time = finish_time

    @property
    def subject(self) -> str:
        """Gets the subject of this Meeting.


        :return: The subject of this Meeting.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this Meeting.


        :param subject: The subject of this Meeting.
        :type subject: str
        """

        self._subject = subject

    @property
    def people(self) -> List[Person]:
        """Gets the people of this Meeting.


        :return: The people of this Meeting.
        :rtype: List[Person]
        """
        return self._people

    @people.setter
    def people(self, people: List[Person]):
        """Sets the people of this Meeting.


        :param people: The people of this Meeting.
        :type people: List[Person]
        """

        self._people = people

    @property
    def attached_files(self) -> List[File]:
        """Gets the attached_files of this Meeting.


        :return: The attached_files of this Meeting.
        :rtype: List[file]
        """
        return self._attached_files

    @attached_files.setter
    def attached_files(self, attached_files: List[File]):
        """Sets the attached_files of this Meeting.


        :param attached_files: The attached_files of this Meeting.
        :type attached_files: List[file]
        """

        self._attached_files = attached_files
