from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, phone=None, email=None, about_section=None, available=None, rating=None):  # noqa: E501
        """Person - a model defined in OpenAPI

        :param id: The id of this Person.  # noqa: E501
        :type id: int
        :param name: The name of this Person.  # noqa: E501
        :type name: str
        :param phone: The phone of this Person.  # noqa: E501
        :type phone: str
        :param email: The email of this Person.  # noqa: E501
        :type email: str
        :param about_section: The about_section of this Person.  # noqa: E501
        :type about_section: str
        :param available: The available of this Person.  # noqa: E501
        :type available: List[datetime]
        :param rating: The rating of this Person.  # noqa: E501
        :type rating: float
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'phone': str,
            'email': str,
            'about_section': str,
            'available': List[datetime],
            'rating': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'phone': 'phone',
            'email': 'email',
            'about_section': 'about_section',
            'available': 'available',
            'rating': 'rating'
        }

        self._id = id
        self._name = name
        self._phone = phone
        self._email = email
        self._about_section = about_section
        self._available = available
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def phone(self) -> str:
        """Gets the phone of this Person.


        :return: The phone of this Person.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Person.


        :param phone: The phone of this Person.
        :type phone: str
        """

        self._phone = phone

    @property
    def email(self) -> str:
        """Gets the email of this Person.


        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Person.


        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def about_section(self) -> str:
        """Gets the about_section of this Person.


        :return: The about_section of this Person.
        :rtype: str
        """
        return self._about_section

    @about_section.setter
    def about_section(self, about_section: str):
        """Sets the about_section of this Person.


        :param about_section: The about_section of this Person.
        :type about_section: str
        """

        self._about_section = about_section

    @property
    def available(self) -> List[datetime]:
        """Gets the available of this Person.


        :return: The available of this Person.
        :rtype: List[datetime]
        """
        return self._available

    @available.setter
    def available(self, available: List[datetime]):
        """Sets the available of this Person.


        :param available: The available of this Person.
        :type available: List[datetime]
        """

        self._available = available

    @property
    def rating(self) -> float:
        """Gets the rating of this Person.

        Average rating for the person, on a scale of 0 to 5.  # noqa: E501

        :return: The rating of this Person.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this Person.

        Average rating for the person, on a scale of 0 to 5.  # noqa: E501

        :param rating: The rating of this Person.
        :type rating: float
        """

        self._rating = rating
